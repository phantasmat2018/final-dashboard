document.addEventListener('DOMContentLoaded', () => {
    // --- –ï–õ–ï–ú–ï–ù–¢–ò DOM ---
    const temperatureEl = document.getElementById('temperature');
    const timeEl = document.getElementById('time');
    const dateEl = document.getElementById('date');
    const weekdayEl = document.getElementById('weekday');
    const themeToggle = document.getElementById('theme-toggle');
    const weatherSoundToggle = document.getElementById('weather-sound-toggle');
    const alertSoundToggle = document.getElementById('alert-sound-toggle');
    const kyivStatusEl = document.getElementById('kyiv-status');
    const channelVideo = document.getElementById('channel-video');
    const channelStatus = document.getElementById('channel-status');
    const monitoringToggle = document.getElementById('monitoring-toggle');
    const streamSoundToggle = document.getElementById('stream-sound-toggle');
    const alertChannelSoundToggle = document.getElementById('alert-channel-sound-toggle');

    // --- –ó–ú–Ü–ù–ù–Ü –°–¢–ê–ù–£ ---
    let lastTemperature = null;
    let isKyivAlertActive = false;
    let weatherSoundEnabled = true;
    let alertSoundEnabled = true;

    // --- –ó–ú–Ü–ù–ù–Ü –î–õ–Ø –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ –ê–£–î–Ü–û–°–ò–ì–ù–ê–õ–£ ---
    let isMonitoringEnabled = true;
    let isStreamSoundEnabled = false;
    let isChannelAlertSoundEnabled = true;
    let silenceStartTime = null; // –ß–∞—Å, –∫–æ–ª–∏ –ø–æ—á–∞–ª–∞—Å—è —Ç–∏—à–∞
    const SILENCE_TIMEOUT_MS = 60 * 1000; // 1 —Ö–≤–∏–ª–∏–Ω–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
    const SILENCE_THRESHOLD = 2; // –ü–æ—Ä—ñ–≥ –≥—É—á–Ω–æ—Å—Ç—ñ. –ú–æ–∂–Ω–∞ —Ä–µ–≥—É–ª—é–≤–∞—Ç–∏ (0-128). –ß–∏–º –º–µ–Ω—à–µ, —Ç–∏–º "—Ç–∏—Ö—ñ—à–µ" –º–∞—î –±—É—Ç–∏ –¥–ª—è —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è.
    let audioContext;
    let analyser;
    let source;
    let dataArray;

    // --- –ê–£–î–Ü–û ---
    const sounds = {
        tempChange: new Audio('sounds/temp_change.mp3'),
        alertStart: new Audio('sounds/alert_start.mp3'),
        alertEnd: new Audio('sounds/alert_end.mp3'),
        channelAlert: new Audio('sounds/alert_start.mp3')
    };
    sounds.channelAlert.loop = true;

    // --- API & URL ---
    const weatherApiUrl = 'https://api.open-meteo.com/v1/forecast?latitude=50.462722&longitude=30.491602&current_weather=true';
    const alertsApiUrl = '/api/alerts';
    const channelStreamUrl = 'https://ext.cdn.nashnet.tv/228.0.0.15/index.m3u8';

    //============================================
    // –°–¢–ê–†–Ü –ë–õ–û–ö–ò (–±–µ–∑ –∑–º—ñ–Ω)
    //============================================
    async function fetchWeather() { /* ... –∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function updateTime() { /* ... –∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω ... */ }
    async function fetchAlerts() { /* ... –∫–æ–¥ –±–µ–∑ –∑–º—ñ–Ω ... */ }
    
    // –ö–æ–ø—ñ—é—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è —Ü–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    async function fetchWeather() { try { const response = await fetch(weatherApiUrl); if (!response.ok) throw new Error(`Weather HTTP error! Status: ${response.status}`); const data = await response.json(); const currentTemp = Math.round(data.current_weather.temperature); temperatureEl.textContent = currentTemp; if (lastTemperature !== null && lastTemperature !== currentTemp && weatherSoundEnabled) { sounds.tempChange.play(); } lastTemperature = currentTemp; } catch (error) { console.error("Failed to fetch weather:", error); temperatureEl.textContent = 'XX'; } }
    function updateTime() { const now = new Date(); const optionsDate = { year: 'numeric', month: 'long', day: 'numeric' }; const optionsWeekday = { weekday: 'long' }; timeEl.textContent = now.toLocaleTimeString('uk-UA'); dateEl.textContent = now.toLocaleDateString('uk-UA', optionsDate); let weekday = now.toLocaleDateString('uk-UA', optionsWeekday); weekdayEl.textContent = weekday.charAt(0).toUpperCase() + weekday.slice(1); }
    async function fetchAlerts() { try { const response = await fetch(alertsApiUrl); if (!response.ok) throw new Error('Failed to fetch from API proxy'); const data = await response.json(); const allAlerts = data.alerts; const kyivAlertNow = allAlerts.some(alert => alert.location_title === '–º. –ö–∏—ó–≤'); if (kyivAlertNow) { kyivStatusEl.textContent = '–º. –ö–∏—ó–≤: –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê'; kyivStatusEl.className = 'alert-status status-active'; } else { kyivStatusEl.textContent = '–º. –ö–∏—ó–≤: –ù–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥–∏'; kyivStatusEl.className = 'alert-status status-inactive'; } if (kyivAlertNow && !isKyivAlertActive) { isKyivAlertActive = true; if (alertSoundEnabled) sounds.alertStart.play(); } else if (!kyivAlertNow && isKyivAlertActive) { isKyivAlertActive = false; if (alertSoundEnabled) sounds.alertEnd.play(); } } catch (error) { console.error("Failed to load alert status:", error); kyivStatusEl.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'; kyivStatusEl.className = 'alert-status'; } }

    //============================================
    // –ù–û–í–ò–ô –ë–õ–û–ö: –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ê–£–î–Ü–û–°–ò–ì–ù–ê–õ–£
    //============================================
    function setupChannelMonitor() {
        if (!isMonitoringEnabled) return;
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Audio API
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        source = audioContext.createMediaElementSource(channelVideo);
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 256;
        dataArray = new Uint8Array(analyser.frequencyBinCount);
        
        source.connect(analyser);
        analyser.connect(audioContext.destination);

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è HLS –ø–æ—Ç–æ–∫—É
        if (Hls.isSupported()) {
            const hls = new Hls();
            hls.loadSource(channelStreamUrl);
            hls.attachMedia(channelVideo);
            hls.on(Hls.Events.MANIFEST_PARSED, () => {
                channelVideo.muted = !isStreamSoundEnabled;
                channelVideo.play().catch(e => console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", e));
            });
        } else if (channelVideo.canPlayType('application/vnd.apple.mpegurl')) {
            channelVideo.src = channelStreamUrl;
            channelVideo.muted = !isStreamSoundEnabled;
            channelVideo.play().catch(e => console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è:", e));
        }
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        monitorLoop();
    }

    function getAverageVolume(array) {
        let sum = 0;
        for (let i = 0; i < array.length; i++) {
            // 128 - —Ü–µ –Ω—É–ª—å–æ–≤–∞ —Ç–æ—á–∫–∞ –¥–ª—è 8-–±—ñ—Ç–Ω–æ–≥–æ –∞—É–¥—ñ–æ
            sum += Math.abs(array[i] - 128);
        }
        return sum / array.length;
    }

    function monitorLoop() {
        if (!isMonitoringEnabled || !analyser) {
            // –Ø–∫—â–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ, –∑—É–ø–∏–Ω—è—î–º–æ —Ü–∏–∫–ª
            requestAnimationFrame(monitorLoop);
            return;
        }

        analyser.getByteTimeDomainData(dataArray);
        const volume = getAverageVolume(dataArray);

        if (volume > SILENCE_THRESHOLD) {
            // –Ñ –∑–≤—É–∫
            if (silenceStartTime !== null) {
                // –¢–∏—à–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è
                sounds.channelAlert.pause();
                channelStatus.textContent = '–ü–æ—Ç—ñ–∫ –∞–∫—Ç–∏–≤–Ω–∏–π';
                channelStatus.classList.remove('status-error');
                channelStatus.classList.add('status-ok');
            }
            silenceStartTime = null;
        } else {
            // –¢–∏—à–∞
            if (silenceStartTime === null) {
                // –¢–∏—à–∞ —â–æ–π–Ω–æ –ø–æ—á–∞–ª–∞—Å—è, –∑–∞—Å—ñ–∫–∞—î–º–æ —á–∞—Å
                silenceStartTime = Date.now();
            } else {
                // –¢–∏—à–∞ —Ç—Ä–∏–≤–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
                const silenceDuration = Date.now() - silenceStartTime;
                if (silenceDuration > SILENCE_TIMEOUT_MS) {
                    // –¢–∏—à–∞ —Ç—Ä–∏–≤–∞—î –¥–æ–≤—à–µ —Ö–≤–∏–ª–∏–Ω–∏, –≤–º–∏–∫–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    channelStatus.textContent = '–í–Ü–î–°–£–¢–ù–Ü–ô –ó–í–£–ö!';
                    channelStatus.classList.add('status-error');
                    channelStatus.classList.remove('status-ok');
                    if (isChannelAlertSoundEnabled) {
                        sounds.channelAlert.play();
                    }
                }
            }
        }
        
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ü–∏–∫–ª
        requestAnimationFrame(monitorLoop);
    }
    
    // --- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ---
    // ... (—Å—Ç–∞—Ä—ñ)
    weatherSoundToggle.addEventListener('click', () => { weatherSoundEnabled = !weatherSoundEnabled; weatherSoundToggle.textContent = weatherSoundEnabled ? 'üîî –ó–≤—É–∫: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîï –ó–≤—É–∫: –í–∏–º–∫–Ω–µ–Ω–æ'; });
    alertSoundToggle.addEventListener('click', () => { alertSoundEnabled = !alertSoundEnabled; alertSoundToggle.textContent = alertSoundEnabled ? 'üîî –¢—Ä–∏–≤–æ–≥–∞: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîï –¢—Ä–∏–≤–æ–≥–∞: –í–∏–º–∫–Ω–µ–Ω–æ'; });
    themeToggle.addEventListener('change', () => { document.body.classList.toggle('dark-theme', themeToggle.checked); });
    
    // ... (–Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É)
    monitoringToggle.addEventListener('click', () => {
        isMonitoringEnabled = !isMonitoringEnabled;
        monitoringToggle.textContent = isMonitoringEnabled ? '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –í–∏–º–∫–Ω–µ–Ω–æ';
        if (!isMonitoringEnabled) {
            sounds.channelAlert.pause();
            channelStatus.textContent = '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤–∏–º–∫–Ω–µ–Ω–æ';
            channelStatus.classList.remove('status-error');
            channelStatus.classList.add('status-ok');
        } else {
            // –Ø–∫—â–æ Web Audio API —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, —Ä–æ–±–∏–º–æ —Ü–µ
            if (!audioContext) {
                setupChannelMonitor();
            }
        }
    });
    
    streamSoundToggle.addEventListener('click', () => {
        isStreamSoundEnabled = !isStreamSoundEnabled;
        channelVideo.muted = !isStreamSoundEnabled;
        streamSoundToggle.textContent = isStreamSoundEnabled ? 'üîä –ü–æ—Ç—ñ–∫: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîä –ü–æ—Ç—ñ–∫: –í–∏–º–∫–Ω–µ–Ω–æ';
    });
    
    alertChannelSoundToggle.addEventListener('click', () => {
        isChannelAlertSoundEnabled = !isChannelAlertSoundEnabled;
        alertChannelSoundToggle.textContent = isChannelAlertSoundEnabled ? 'üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîï –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: –í–∏–º–∫–Ω–µ–Ω–æ';
        if (!isChannelAlertSoundEnabled) {
            sounds.channelAlert.pause();
        }
    });
    
    // --- –ü–ï–†–®–ò–ô –ó–ê–ü–£–°–ö –¢–ê –Ü–ù–¢–ï–†–í–ê–õ–ò ---
    fetchWeather();
    updateTime();
    fetchAlerts();
    if(isMonitoringEnabled) {
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª—É. Web Audio API –≤–∏–º–∞–≥–∞—î –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º,
        // —Ç–æ–º—É –º–∏ –ø—Ä–∏–≤'—è–∂–µ–º–æ –π–æ–≥–æ —Å—Ç–∞—Ä—Ç –¥–æ –ø–µ—Ä—à–æ–≥–æ –∫–ª—ñ–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫.
        // –ê–ª–µ –º–∏ –º–æ–∂–µ–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –π–æ–≥–æ –æ–¥—Ä–∞–∑—É.
        try {
            setupChannelMonitor();
        } catch(e) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞—É–¥—ñ–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.");
            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –∫–ª—ñ–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É, —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            document.body.addEventListener('click', () => setupChannelMonitor(), { once: true });
        }
    }
    
    setInterval(fetchWeather, 60 * 1000);
    setInterval(updateTime, 1000);
    setInterval(fetchAlerts, 10 * 1000);
});