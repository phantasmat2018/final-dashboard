document.addEventListener('DOMContentLoaded', () => {
    // --- –ï–õ–ï–ú–ï–ù–¢–ò DOM ---
    const temperatureEl = document.getElementById('temperature');
    const timeEl = document.getElementById('time');
    const dateEl = document.getElementById('date');
    const weekdayEl = document.getElementById('weekday');
    const themeToggle = document.getElementById('theme-toggle');
    const weatherSoundToggle = document.getElementById('weather-sound-toggle');
    const alertSoundToggle = document.getElementById('alert-sound-toggle');
    const kyivStatusEl = document.getElementById('kyiv-status');
    const footerAlertList = document.getElementById('footer-alert-list');
    const weatherNotificationTypeToggle = document.getElementById('weather-notification-type-toggle');

    // --- –ó–ú–Ü–ù–ù–Ü –°–¢–ê–ù–£ ---
    let lastTemperature = null;
    let isKyivAlertActive = false;
    let weatherSoundEnabled = true;
    let alertSoundEnabled = true;
    let weatherNotificationType = 'voice'; // 'voice' (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) –∞–±–æ 'sound'

    // --- –ê–£–î–Ü–û ---
    const sounds = {
        tempChange: new Audio('sounds/temp_change.mp3'),
        alertStart: new Audio('sounds/alert_start.mp3'),
        alertEnd: new Audio('sounds/alert_end.mp3')
    };
    
    // --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ò–ù–¢–ï–ó–£ –ú–û–í–ò ---
    let ukrainianVoice = null;
    function loadVoices() {
        const voices = window.speechSynthesis.getVoices();
        ukrainianVoice = voices.find(voice => voice.lang === 'uk-UA' && voice.name.includes('Female'));
        if (!ukrainianVoice) {
            ukrainianVoice = voices.find(voice => voice.lang === 'uk-UA');
        }
    }
    loadVoices();
    if (window.speechSynthesis.onvoiceschanged !== undefined) {
        window.speechSynthesis.onvoiceschanged = loadVoices;
    }


    // --- API ---
    const weatherApiUrl = 'https://api.open-meteo.com/v1/forecast?latitude=50.462722&longitude=30.491602&current_weather=true';
    const alertsApiUrl = '/api/alerts'; 

    //============================================
    // –û–ó–í–£–ß–ï–ù–ù–Ø –¢–ê –Ü–ù–®–Ü –§–£–ù–ö–¶–Ü–á
    //============================================
    function speak(text) {
        // –§—É–Ω–∫—Ü—ñ—è speak —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ª–∏—à–µ weatherSoundEnabled.
        // –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—ó –¥–ª—è –Ω–µ–≥–∞–π–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É.
        if (!weatherSoundEnabled || !window.speechSynthesis) return;

        window.speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = 'uk-UA';
        
        if (ukrainianVoice) {
            utterance.voice = ukrainianVoice;
        }
        
        utterance.rate = 1;
        utterance.pitch = 1;

        window.speechSynthesis.speak(utterance);
    }

    //============================================
    // –ë–õ–û–ö –ü–û–ì–û–î–ò
    //============================================
    async function fetchWeather() {
        try {
            const response = await fetch(weatherApiUrl);
            if (!response.ok) throw new Error(`Weather HTTP error! Status: ${response.status}`);
            const data = await response.json();
            const currentTemp = Math.round(data.current_weather.temperature);
            
            temperatureEl.textContent = currentTemp;
            
            if (lastTemperature !== null && lastTemperature !== currentTemp && weatherSoundEnabled) {
                if (weatherNotificationType === 'voice') {
                    const textToSpeak = `${currentTemp} –≥—Ä–∞–¥—É—Å—ñ–≤`;
                    speak(textToSpeak);
                } else {
                    sounds.tempChange.play();
                }
            }
            lastTemperature = currentTemp;
        } catch (error) {
            console.error("Failed to fetch weather:", error);
            temperatureEl.textContent = 'XX';
        }
    }

    //============================================
    // –Ü–ù–®–Ü –ë–õ–û–ö–ò
    //============================================
    function updateTime() {
        const now = new Date();
        const optionsDate = { year: 'numeric', month: 'long', day: 'numeric' };
        const optionsWeekday = { weekday: 'long' };
        timeEl.textContent = now.toLocaleTimeString('uk-UA');
        dateEl.textContent = now.toLocaleDateString('uk-UA', optionsDate);
        let weekday = now.toLocaleDateString('uk-UA', optionsWeekday);
        weekdayEl.textContent = weekday.charAt(0).toUpperCase() + weekday.slice(1);
    }

    async function fetchAlerts() {
        try {
            const response = await fetch(alertsApiUrl);
            if (!response.ok) throw new Error('Failed to fetch from API proxy');
            
            const data = await response.json();
            const allAlerts = data.alerts;

            const kyivAlertNow = allAlerts.some(alert => alert.location_title === '–º. –ö–∏—ó–≤');
            if (kyivAlertNow) {
                kyivStatusEl.textContent = '–º. –ö–∏—ó–≤: –ü–û–í–Ü–¢–†–Ø–ù–ê –¢–†–ò–í–û–ì–ê';
                kyivStatusEl.className = 'alert-status status-active';
            } else {
                kyivStatusEl.textContent = '–º. –ö–∏—ó–≤: –ù–µ–º–∞—î —Ç—Ä–∏–≤–æ–≥–∏';
                kyivStatusEl.className = 'alert-status status-inactive';
            }
            if (kyivAlertNow && !isKyivAlertActive) {
                isKyivAlertActive = true;
                if (alertSoundEnabled) sounds.alertStart.play();
            } else if (!kyivAlertNow && isKyivAlertActive) {
                isKyivAlertActive = false;
                if (alertSoundEnabled) sounds.alertEnd.play();
            }

            const otherRegionsAlerts = allAlerts.filter(alert => alert.location_title !== '–º. –ö–∏—ó–≤');
            footerAlertList.innerHTML = ''; 

            if (otherRegionsAlerts.length > 0) {
                const locationNames = otherRegionsAlerts.map(alert => alert.location_title);
                const uniqueLocationNames = [...new Set(locationNames)];

                const title = document.createElement('h4');
                title.textContent = '–¢—Ä–∏–≤–æ–≥–∞ –≤ —ñ–Ω—à–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö:';
                footerAlertList.appendChild(title);

                uniqueLocationNames.forEach(locationName => {
                    const badge = document.createElement('div');
                    badge.className = 'alert-badge';
                    badge.textContent = locationName;
                    footerAlertList.appendChild(badge);
                });
                footerAlertList.style.display = 'flex';
            } else {
                footerAlertList.style.display = 'none';
            }

        } catch (error) {
            console.error("Failed to load alert status:", error);
            kyivStatusEl.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è';
            kyivStatusEl.className = 'alert-status';
            footerAlertList.innerHTML = '';
            footerAlertList.style.display = 'none';
        }
    }
    
    // --- –û–ë–†–û–ë–ù–ò–ö–ò –ü–û–î–Ü–ô ---
    weatherSoundToggle.addEventListener('click', () => {
        weatherSoundEnabled = !weatherSoundEnabled;
        weatherSoundToggle.textContent = weatherSoundEnabled ? 'üîî –ó–≤—É–∫: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîï –ó–≤—É–∫: –í–∏–º–∫–Ω–µ–Ω–æ';
    });

    // --> –û–°–¨ –¢–£–¢ –û–°–ù–û–í–ù–Ü –ó–ú–Ü–ù–ò <--
    weatherNotificationTypeToggle.addEventListener('change', () => {
        if (weatherNotificationTypeToggle.checked) {
            // –ü–µ—Ä–µ–º–∫–Ω—É–ª–∏ –Ω–∞ —Ä–µ–∂–∏–º "–∑–≤—É–∫" (üéµ)
            weatherNotificationType = 'sound';
            // –ù–µ–≥–∞–π–Ω–æ –≤—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—É–∫, —è–∫—â–æ –∑–≤—É–∫ –∑–∞–≥–∞–ª–æ–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ
            if (weatherSoundEnabled) {
                sounds.tempChange.play();
            }
        } else {
            // –ü–µ—Ä–µ–º–∫–Ω—É–ª–∏ –Ω–∞ —Ä–µ–∂–∏–º "–≥–æ–ª–æ—Å" (üó£Ô∏è)
            weatherNotificationType = 'voice';
            // –ù–µ–≥–∞–π–Ω–æ –æ–∑–≤—É—á—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, —è–∫—â–æ —î –¥–∞–Ω—ñ —ñ –∑–≤—É–∫ —É–≤—ñ–º–∫–Ω–µ–Ω–æ
            if (weatherSoundEnabled && lastTemperature !== null) {
                const textToSpeak = `${lastTemperature} –≥—Ä–∞–¥—É—Å—ñ–≤`;
                speak(textToSpeak);
            }
        }
    });

    alertSoundToggle.addEventListener('click', () => {
        alertSoundEnabled = !alertSoundEnabled;
        alertSoundToggle.textContent = alertSoundEnabled ? 'üîî –¢—Ä–∏–≤–æ–≥–∞: –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : 'üîï –¢—Ä–∏–≤–æ–≥–∞: –í–∏–º–∫–Ω–µ–Ω–æ';
    });
    
    themeToggle.addEventListener('change', () => {
        document.body.classList.toggle('dark-theme', themeToggle.checked);
    });

    // --- –ü–ï–†–®–ò–ô –ó–ê–ü–£–°–ö –¢–ê –Ü–ù–¢–ï–†–í–ê–õ–ò ---
    fetchWeather();
    updateTime();
    fetchAlerts();
    setInterval(fetchWeather, 60 * 1000);
    setInterval(updateTime, 1000);
    setInterval(fetchAlerts, 10 * 1000);
});